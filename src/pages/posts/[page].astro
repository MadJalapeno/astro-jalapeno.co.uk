---
import { getCollection } from "astro:content";
import slugify from 'slugify';
import BlogTile from '@partials/BlogTile.astro';

import BaseLayout from '@layouts/BaseLayout.astro';

const pageTitle = "Blog Posts";

// Fetch all posts
const allPosts = await Astro.glob('@content/posts/*.{md,mdx}');

// Pagination settings
const postsPerPage = 6;
const totalPages = Math.ceil(allPosts.length / postsPerPage);

console.error("totalPages: ", totalPages);

export async function getStaticPaths() {
  const allPosts = await Astro.glob('@content/posts/*.{md,mdx}');
  const postsPerPage = 6;

  const totalPages = Math.ceil(allPosts.length / postsPerPage);

  return Array.from({ length: totalPages }).map((_, index) => ({
    params: { page: (index + 1).toString() },
  }));
}

// Get the current page from the URL parameter
const { page } = Astro.params;
const currentPage = parseInt(page) || 1;

// Calculate the start and end index for the posts to display on the current page
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;

// Get the posts for the current page
const paginatedPosts = allPosts.slice(startIndex, endIndex);
---

<BaseLayout pageTitle={pageTitle}>

  <div>
    <ul class="timeline timeline-snap-icon max-md:timeline-compact timeline-vertical">
    {paginatedPosts.map((post, index) => (
      <li>
      <div class="timeline-middle">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          class="h-5 w-5">
          <path
            fill-rule="evenodd"
            d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
            clip-rule="evenodd" />
        </svg>
      </div>
      <div class={`${index % 2 === 0 ? 'timeline-start md:text-end' : 'timeline-end'} mb-10`}>
        <BlogTile post={post} />
      </div>
      <hr />
      </li>
    ))}
    </ul>
  </div>

  <div>
    {currentPage > 1 && (
      <a href={`/posts/${currentPage - 1}`}>Previous</a>
    )}
    {Array.from({ length: totalPages }).map((_, index) => (
      <a href={`/posts/${index + 1}`} class={index + 1 === currentPage ? 'active' : ''}>
        {index + 1}
      </a>
    ))}
    {currentPage < totalPages && (
      <a href={`/posts/${currentPage + 1}`}>Next</a>
    )}
  </div>
</BaseLayout>